generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                        String                     @id @default(cuid())
  name                      String                     @unique
  legalName                 String?
  taxId                     String?                    @unique
  address                   String?
  city                      String
  state                     String
  country                   String
  email                     String?                    @unique
  phone                     String?
  description               String?
  type                      String                     @default("COMPANY")
  status                    String                     @default("ACTIVE")
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  companyEvents             CompanyEvent[]
  entityInvoices            EntityInvoice[]            @relation("CompanyEntityInvoices")
  paidExpenses              Expense[]                  @relation("CompanyPaidExpense")
  expenseDistributions      ExpenseDistribution[]      @relation("CompanyExpenseDistributions")
  receivedIncomes           Income[]                   @relation("CompanyReceivedIncome")
  incomeDistributions       IncomeDistribution[]       @relation("CompanyIncomeDistributions")
  stockExpenseDistributions StockExpenseDistribution[] @relation("CompanyStockExpenseDistributions")
  vendorInvoices            VendorInvoice[]            @relation("CompanyVendorInvoices")
  warehouses                Warehouse[]                @relation("CompanyWarehouses")
  events                    Event[]                    @relation("EventCompanies")
  worksheets                Worksheet[]

  @@index([name])
  @@index([email])
  @@index([taxId])
}

model Venue {
  id                        String                     @id @default(cuid())
  name                      String
  city                      String
  state                     String
  country                   String
  territory                 String
  capacity                  Int
  cuit                      String?                    @unique
  description               String?
  type                      String                     @default("VENUE")
  status                    String                     @default("ACTIVE")
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  entityInvoices            EntityInvoice[]            @relation("VenueEntityInvoices")
  events                    Event[]
  paidExpenses              Expense[]                  @relation("VenuePaidExpense")
  expenseDistributions      ExpenseDistribution[]      @relation("VenueExpenseDistributions")
  receivedIncomes           Income[]                   @relation("VenueReceivedIncome")
  incomeDistributions       IncomeDistribution[]       @relation("VenueIncomeDistributions")
  stockExpenseDistributions StockExpenseDistribution[] @relation("VenueStockExpenseDistributions")
  vendorInvoices            VendorInvoice[]            @relation("VenueVendorInvoices")
  warehouses                Warehouse[]                @relation("VenueWarehouses")
  venueEvents               VenueEvent[]
  worksheets                Worksheet[]

  @@map("venues")
}

model Socio {
  id                        String                     @id @default(cuid())
  name                      String
  legalName                 String?
  taxId                     String?                    @unique
  address                   String?
  city                      String
  state                     String
  territory                 String
  country                   String
  email                     String?                    @unique
  phone                     String?
  description               String?
  type                      String                     @default("SOCIO")
  status                    String                     @default("ACTIVE")
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  entityInvoices            EntityInvoice[]            @relation("SocioEntityInvoices")
  paidExpenses              Expense[]                  @relation("SocioPaidExpense")
  expenseDistributions      ExpenseDistribution[]      @relation("SocioExpenseDistributions")
  receivedIncomes           Income[]                   @relation("SocioReceivedIncome")
  incomeDistributions       IncomeDistribution[]       @relation("SocioIncomeDistributions")
  socioEvents               SocioEvent[]
  stockExpenseDistributions StockExpenseDistribution[] @relation("SocioStockExpenseDistributions")
  vendorInvoices            VendorInvoice[]            @relation("SocioVendorInvoices")
  warehouses                Warehouse[]                @relation("SocioWarehouses")
  events                    Event[]
  worksheets                Worksheet[]

  @@index([name])
  @@index([email])
  @@index([taxId])
}

model BusinessPartner {
  id                        String                     @id @default(cuid())
  name                      String
  description               String?
  type                      String                     @default("PROVIDER")
  status                    String                     @default("ACTIVE")
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  stockMovements            StockMovement[]
  stockExpenseDistributions StockExpenseDistribution[] @relation("BusinessPartnerStockExpenseDistributions")
  vendorInvoices            VendorInvoice[]            @relation("BusinessPartnerVendorInvoices")
  entityInvoices            EntityInvoice[]            @relation("BusinessPartnerEntityInvoices")
  expenseDistributions      ExpenseDistribution[]      @relation("BusinessPartnerExpenseDistributions")
  incomeDistributions       IncomeDistribution[]       @relation("BusinessPartnerIncomeDistributions")
  warehouses                Warehouse[]                @relation("BusinessPartnerWarehouses")
}

model VenueEvent {
  id                        String                     @id @default(cuid())
  venueId                   String
  eventId                   String
  role                      VenueRole
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  expenseDistributions      ExpenseDistribution[]      @relation("VenueEventExpenseDistributions")
  incomeDistributions       IncomeDistribution[]       @relation("VenueEventIncomeDistributions")
  stockExpenseDistributions StockExpenseDistribution[] @relation("VenueEventStockExpenseDistributions")
  event                     Event                      @relation(fields: [eventId], references: [id])
  venue                     Venue                      @relation(fields: [venueId], references: [id])

  @@unique([venueId, eventId])
  @@map("venue_events")
}

model CompanyEvent {
  id                        String                     @id @default(cuid())
  companyId                 String
  eventId                   String
  incomeAmount              Float?                     @default(0)
  expenseAmount             Float?                     @default(0)
  currency                  Currency                   @default(USD)
  notes                     String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  company                   Company                    @relation(fields: [companyId], references: [id])
  event                     Event                      @relation(fields: [eventId], references: [id])
  expenseDistributions      ExpenseDistribution[]      @relation("CompanyEventExpenseDistributions")
  incomeDistributions       IncomeDistribution[]       @relation("CompanyEventIncomeDistributions")
  stockExpenseDistributions StockExpenseDistribution[] @relation("CompanyEventStockExpenseDistributions")

  @@unique([companyId, eventId])
  @@index([companyId])
  @@index([eventId])
}

model SocioEvent {
  id                        String                     @id @default(cuid())
  socioId                   String
  eventId                   String
  incomeAmount              Float?                     @default(0)
  expenseAmount             Float?                     @default(0)
  currency                  Currency                   @default(USD)
  paymentStatus             String                     @default("PENDING")
  paymentDate               DateTime?
  notes                     String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  expenseDistributions      ExpenseDistribution[]      @relation("SocioEventExpenseDistributions")
  incomeDistributions       IncomeDistribution[]       @relation("SocioEventIncomeDistributions")
  event                     Event                      @relation(fields: [eventId], references: [id])
  socio                     Socio                      @relation(fields: [socioId], references: [id])
  stockExpenseDistributions StockExpenseDistribution[] @relation("SocioEventStockExpenseDistributions")

  @@unique([socioId, eventId])
  @@index([socioId])
  @@index([eventId])
}

model VendorInvoice {
  id        String          @id @default(cuid())
  vendorId  String
  invoiceId String
  companyId String?
  venueId   String?
  socioId   String?
  company   Company?        @relation("CompanyVendorInvoices", fields: [companyId], references: [id])
  invoice   Invoice         @relation(fields: [invoiceId], references: [id])
  socio     Socio?          @relation("SocioVendorInvoices", fields: [socioId], references: [id])
  vendor    BusinessPartner @relation("BusinessPartnerVendorInvoices", fields: [vendorId], references: [id])
  venue     Venue?          @relation("VenueVendorInvoices", fields: [venueId], references: [id])
}

model EntityInvoice {
  id        String          @id @default(cuid())
  entityId  String
  invoiceId String
  companyId String?
  venueId   String?
  socioId   String?
  company   Company?        @relation("CompanyEntityInvoices", fields: [companyId], references: [id])
  entity    BusinessPartner @relation("BusinessPartnerEntityInvoices", fields: [entityId], references: [id])
  invoice   Invoice         @relation(fields: [invoiceId], references: [id])
  socio     Socio?          @relation("SocioEntityInvoices", fields: [socioId], references: [id])
  venue     Venue?          @relation("VenueEntityInvoices", fields: [venueId], references: [id])
}

model ExpenseDistribution {
  id                String           @id @default(cuid())
  amount            Float
  expenseId         String
  paymentRole       PaymentRole?
  settledAmount     Float            @default(0)
  pendingAmount     Float            @default(0)
  companyId         String?
  venueId           String?
  socioId           String?
  businessPartnerId String?
  venueEventId      String?
  companyEventId    String?
  socioEventId      String?
  debtSettlements   DebtSettlement[] @relation("ExpenseDebtSettlements")
  businessPartner   BusinessPartner? @relation("BusinessPartnerExpenseDistributions", fields: [businessPartnerId], references: [id])
  companyEvent      CompanyEvent?    @relation("CompanyEventExpenseDistributions", fields: [companyEventId], references: [id])
  company           Company?         @relation("CompanyExpenseDistributions", fields: [companyId], references: [id])
  expense           Expense          @relation(fields: [expenseId], references: [id])
  socioEvent        SocioEvent?      @relation("SocioEventExpenseDistributions", fields: [socioEventId], references: [id])
  socio             Socio?           @relation("SocioExpenseDistributions", fields: [socioId], references: [id])
  venueEvent        VenueEvent?      @relation("VenueEventExpenseDistributions", fields: [venueEventId], references: [id])
  venue             Venue?           @relation("VenueExpenseDistributions", fields: [venueId], references: [id])
}

model IncomeDistribution {
  id                String           @id @default(cuid())
  amount            Float
  incomeId          String
  paymentRole       PaymentRole?
  settledAmount     Float            @default(0)
  pendingAmount     Float            @default(0)
  companyId         String?
  venueId           String?
  socioId           String?
  businessPartnerId String?
  venueEventId      String?
  companyEventId    String?
  socioEventId      String?
  debtSettlements   DebtSettlement[] @relation("IncomeDebtSettlements")
  businessPartner   BusinessPartner? @relation("BusinessPartnerIncomeDistributions", fields: [businessPartnerId], references: [id])
  companyEvent      CompanyEvent?    @relation("CompanyEventIncomeDistributions", fields: [companyEventId], references: [id])
  company           Company?         @relation("CompanyIncomeDistributions", fields: [companyId], references: [id])
  income            Income           @relation(fields: [incomeId], references: [id])
  socioEvent        SocioEvent?      @relation("SocioEventIncomeDistributions", fields: [socioEventId], references: [id])
  socio             Socio?           @relation("SocioIncomeDistributions", fields: [socioId], references: [id])
  venueEvent        VenueEvent?      @relation("VenueEventIncomeDistributions", fields: [venueEventId], references: [id])
  venue             Venue?           @relation("VenueIncomeDistributions", fields: [venueId], references: [id])
}

model Warehouse {
  id                String           @id @default(cuid())
  name              String
  location          String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  companyId         String?
  venueId           String?
  socioId           String?
  businessPartnerId String?
  stocks            Stock[]
  businessPartner   BusinessPartner? @relation("BusinessPartnerWarehouses", fields: [businessPartnerId], references: [id])
  company           Company?         @relation("CompanyWarehouses", fields: [companyId], references: [id])
  socio             Socio?           @relation("SocioWarehouses", fields: [socioId], references: [id])
  venue             Venue?           @relation("VenueWarehouses", fields: [venueId], references: [id])
}

model Event {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           String          @default("EVENT")
  status         String          @default("ACTIVE")
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  companyId      String?
  venueId        String?
  socioId        String?
  company        Company?        @relation("EventCompanies", fields: [companyId], references: [id])
  venue          Venue?          @relation(fields: [venueId], references: [id])
  socio          Socio?          @relation(fields: [socioId], references: [id])
  worksheets     Worksheet[]
  incomes        Income[]
  expenses       Expense[]
  stockMovements StockMovement[]
  venueEvents    VenueEvent[]
  companyEvents  CompanyEvent[]
  socioEvents    SocioEvent[]
  EventStock     EventStock[]
  EventMovement  EventMovement[]

  @@index([companyId])
  @@index([venueId])
  @@index([socioId])
}

model Category {
  id              String            @id @default(cuid())
  name            String
  type            String
  description     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  incomes         Income[]
  expenses        Expense[]
  subcategories   Subcategory[]
  InvoiceCategory InvoiceCategory[]

  @@unique([name, type])
  @@index([type])
  @@map("category")
}

model Subcategory {
  id                 String               @id @default(cuid())
  name               String
  type               String
  description        String?
  categoryId         String
  category           Category             @relation(fields: [categoryId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  incomes            Income[]
  expenses           Expense[]
  InvoiceSubcategory InvoiceSubcategory[]

  @@unique([name, categoryId])
  @@index([categoryId])
  @@index([type])
  @@map("subcategory")
}

model Invoice {
  id             String               @id @default(cuid())
  number         String               @unique
  date           DateTime
  status         String               @default("PENDING")
  total          Float
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  entityInvoices EntityInvoice[]
  categories     InvoiceCategory[]
  subcategories  InvoiceSubcategory[]
  vendorInvoices VendorInvoice[]
}

model InvoiceCategory {
  id         String   @id @default(cuid())
  invoiceId  String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])
}

model InvoiceSubcategory {
  id            String      @id @default(cuid())
  invoiceId     String
  subcategoryId String
  invoice       Invoice     @relation(fields: [invoiceId], references: [id])
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
}

model Income {
  id                String               @id @default(cuid())
  quantity          Float
  unitPrice         Float
  amount            Float
  currency          String               @default("USD")
  date              DateTime
  description       String?
  companyReceiverId String?
  venueReceiverId   String?
  socioReceiverId   String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  categoryId        String?
  subcategoryId     String?
  eventId           String?
  category          Category?            @relation(fields: [categoryId], references: [id])
  subcategory       Subcategory?         @relation(fields: [subcategoryId], references: [id])
  event             Event?               @relation(fields: [eventId], references: [id])
  companyReceiver   Company?             @relation("CompanyReceivedIncome", fields: [companyReceiverId], references: [id])
  venueReceiver     Venue?               @relation("VenueReceivedIncome", fields: [venueReceiverId], references: [id])
  socioReceiver     Socio?               @relation("SocioReceivedIncome", fields: [socioReceiverId], references: [id])
  distributions     IncomeDistribution[]
  stockMovements    StockMovement[]

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([eventId])
  @@index([companyReceiverId])
  @@index([venueReceiverId])
  @@index([socioReceiverId])
}

model Expense {
  id                   String                @id @default(cuid())
  quantity             Float
  unitPrice            Float
  amount               Float
  currency             String                @default("USD")
  date                 DateTime
  description          String?
  companyPayerId       String?
  venuePayerId         String?
  socioPayerId         String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  categoryId           String?
  subcategoryId        String?
  eventId              String?
  category             Category?             @relation(fields: [categoryId], references: [id])
  subcategory          Subcategory?          @relation(fields: [subcategoryId], references: [id])
  event                Event?                @relation(fields: [eventId], references: [id])
  companyPayer         Company?              @relation("CompanyPaidExpense", fields: [companyPayerId], references: [id])
  venuePayer           Venue?                @relation("VenuePaidExpense", fields: [venuePayerId], references: [id])
  socioPayer           Socio?                @relation("SocioPaidExpense", fields: [socioPayerId], references: [id])
  distributions        ExpenseDistribution[]
  stockMovements       StockMovement[]
  EventStock           EventStock?
  WorksheetConsumption WorksheetConsumption?

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([eventId])
  @@index([companyPayerId])
  @@index([venuePayerId])
  @@index([socioPayerId])
}

model InventoryItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  unit        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  stocks      Stock[]
}

model Stock {
  id             String          @id @default(cuid())
  quantity       Float
  unitCost       Float
  totalCost      Float
  averageCost    Float
  currency       Currency        @default(USD)
  itemId         String
  warehouseId    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  eventStocks    EventStock[]
  item           InventoryItem   @relation(fields: [itemId], references: [id])
  warehouse      Warehouse       @relation(fields: [warehouseId], references: [id])
  stockMovements StockMovement[]
}

model StockMovement {
  id                    String                 @id @default(cuid())
  type                  String                 @default("STOCK_MOVEMENT")
  status                String                 @default("ACTIVE")
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  eventId               String?
  worksheetId           String?
  incomeId              String?
  expenseId             String?
  stockMovementId       String?
  event                 Event?                 @relation(fields: [eventId], references: [id])
  worksheet             Worksheet?             @relation(fields: [worksheetId], references: [id])
  income                Income?                @relation(fields: [incomeId], references: [id])
  expense               Expense?               @relation(fields: [expenseId], references: [id])
  worksheetConsumptions WorksheetConsumption[] @relation("StockMovementConsumption")
  BusinessPartner       BusinessPartner?       @relation(fields: [businessPartnerId], references: [id])
  businessPartnerId     String?
  Stock                 Stock?                 @relation(fields: [stockId], references: [id])
  stockId               String?
  EventStock            EventStock?            @relation(fields: [eventStockId], references: [id])
  eventStockId          String?

  @@index([eventId])
  @@index([worksheetId])
  @@index([incomeId])
  @@index([expenseId])
  @@index([stockMovementId])
}

model EventStock {
  id             String                 @id @default(cuid())
  quantity       Float
  unitCost       Float
  totalCost      Float
  currency       Currency               @default(USD)
  eventId        String
  stockId        String
  expenseId      String?                @unique
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  event          Event                  @relation(fields: [eventId], references: [id])
  expense        Expense?               @relation(fields: [expenseId], references: [id])
  stock          Stock                  @relation(fields: [stockId], references: [id])
  stockMovements StockMovement[]
  consumptions   WorksheetConsumption[]
}

model Worksheet {
  id                   String                 @id @default(cuid())
  name                 String
  description          String?
  type                 String                 @default("WORKSHEET")
  status               String                 @default("ACTIVE")
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  eventId              String?
  companyId            String?
  venueId              String?
  socioId              String?
  event                Event?                 @relation(fields: [eventId], references: [id])
  company              Company?               @relation(fields: [companyId], references: [id])
  venue                Venue?                 @relation(fields: [venueId], references: [id])
  socio                Socio?                 @relation(fields: [socioId], references: [id])
  stockMovements       StockMovement[]
  WorksheetConsumption WorksheetConsumption[]

  @@index([eventId])
  @@index([companyId])
  @@index([venueId])
  @@index([socioId])
}

model WorksheetConsumption {
  id              String                     @id @default(cuid())
  quantity        Float
  unitCost        Float
  totalCost       Float
  currency        Currency                   @default(USD)
  worksheetId     String
  eventStockId    String
  expenseId       String?                    @unique
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @updatedAt
  distributions   StockExpenseDistribution[]
  stockMovement   StockMovement?             @relation("StockMovementConsumption", fields: [stockMovementId], references: [id])
  eventStock      EventStock                 @relation(fields: [eventStockId], references: [id])
  expense         Expense?                   @relation(fields: [expenseId], references: [id])
  worksheet       Worksheet                  @relation(fields: [worksheetId], references: [id])
  stockMovementId String?
}

model StockExpenseDistribution {
  id                     String                @id @default(cuid())
  type                   String                @default("STOCK_EXPENSE_DISTRIBUTION")
  status                 String                @default("ACTIVE")
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  businessPartnerId      String
  companyId              String?
  venueId                String?
  socioId                String?
  venueEventId           String?
  companyEventId         String?
  socioEventId           String?
  businessPartner        BusinessPartner       @relation("BusinessPartnerStockExpenseDistributions", fields: [businessPartnerId], references: [id])
  company                Company?              @relation("CompanyStockExpenseDistributions", fields: [companyId], references: [id])
  venue                  Venue?                @relation("VenueStockExpenseDistributions", fields: [venueId], references: [id])
  socio                  Socio?                @relation("SocioStockExpenseDistributions", fields: [socioId], references: [id])
  venueEvent             VenueEvent?           @relation("VenueEventStockExpenseDistributions", fields: [venueEventId], references: [id])
  companyEvent           CompanyEvent?         @relation("CompanyEventStockExpenseDistributions", fields: [companyEventId], references: [id])
  socioEvent             SocioEvent?           @relation("SocioEventStockExpenseDistributions", fields: [socioEventId], references: [id])
  WorksheetConsumption   WorksheetConsumption? @relation(fields: [worksheetConsumptionId], references: [id])
  worksheetConsumptionId String?

  @@index([businessPartnerId])
  @@index([companyId])
  @@index([venueId])
  @@index([socioId])
  @@index([venueEventId])
  @@index([companyEventId])
  @@index([socioEventId])
}

model DebtSettlement {
  id                    String               @id @default(cuid())
  amount                Float
  currency              Currency             @default(USD)
  date                  DateTime
  notes                 String?
  expenseDistributionId String?
  incomeDistributionId  String?
  debtorType            String
  debtorId              String
  creditorType          String
  creditorId            String
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  expenseDistribution   ExpenseDistribution? @relation("ExpenseDebtSettlements", fields: [expenseDistributionId], references: [id])
  incomeDistribution    IncomeDistribution?  @relation("IncomeDebtSettlements", fields: [incomeDistributionId], references: [id])

  @@index([debtorType, debtorId])
  @@index([creditorType, creditorId])
}

model EventMovement {
  id          String   @id @default(cuid())
  eventId     String
  type        String // 'INCOME' or 'EXPENSE'
  amount      Float
  description String
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  event       Event    @relation(fields: [eventId], references: [id])

  @@index([eventId])
  @@map("event_movements")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

enum Currency {
  AED
  ARS
  AUD
  BRL
  CLP
  COP
  CRC
  EUR
  GBP
  MXN
  NZD
  PEN
  USD
  UYU
  PYG
  CNY
  JPY
}

enum ConsumptionMethod {
  FIFO
  LIFO
  AVERAGE_COST
}

enum TaxPercentage {
  ZERO
  SIX_POINT_THREE
  SEVEN
  EIGHT_POINT_EIGHTY_SEVEN
  TEN_POINT_FIVE
  FIFTEEN
  TWENTY_ONE
}

enum VenueRole {
  PAYING
  RECEIVING
  NEUTRAL
}

enum PaymentRole {
  PAYER
  RECEIVER
}
