generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                        String                     @id @default(cuid())
  name                      String                     @unique
  legalName                 String?
  taxId                     String?                    @unique
  address                   String?
  city                      String
  state                     String
  country                   String
  email                     String?                    @unique
  phone                     String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  companyEvents             CompanyEvent[]
  entityInvoices            EntityInvoice[]            @relation("CompanyEntityInvoices")
  paidExpenses              Expense[]                  @relation("CompanyPaidExpense")
  expenseDistributions      ExpenseDistribution[]      @relation("CompanyExpenseDistributions")
  receivedIncomes           Income[]                   @relation("CompanyReceivedIncome")
  incomeDistributions       IncomeDistribution[]       @relation("CompanyIncomeDistributions")
  stockExpenseDistributions StockExpenseDistribution[] @relation("CompanyStockExpenseDistributions")
  vendorInvoices            VendorInvoice[]            @relation("CompanyVendorInvoices")
  warehouses                Warehouse[]                @relation("CompanyWarehouses")
  events                    Event[]                    @relation("EventCompanies")

  @@index([name])
  @@index([email])
  @@index([taxId])
}

model Venue {
  id                        String                     @id @default(cuid())
  name                      String
  city                      String
  state                     String
  country                   String
  territory                 String
  capacity                  Int
  cuit                      String?                    @unique
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  entityInvoices            EntityInvoice[]            @relation("VenueEntityInvoices")
  events                    Event[]
  paidExpenses              Expense[]                  @relation("VenuePaidExpense")
  expenseDistributions      ExpenseDistribution[]      @relation("VenueExpenseDistributions")
  receivedIncomes           Income[]                   @relation("VenueReceivedIncome")
  incomeDistributions       IncomeDistribution[]       @relation("VenueIncomeDistributions")
  stockExpenseDistributions StockExpenseDistribution[] @relation("VenueStockExpenseDistributions")
  vendorInvoices            VendorInvoice[]            @relation("VenueVendorInvoices")
  warehouses                Warehouse[]                @relation("VenueWarehouses")
  venueEvents               VenueEvent[]

  @@map("venues")
}

model Socio {
  id                        String                     @id @default(cuid())
  name                      String
  legalName                 String?
  taxId                     String?                    @unique
  address                   String?
  city                      String
  state                     String
  territory                 String
  country                   String
  email                     String?                    @unique
  phone                     String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  entityInvoices            EntityInvoice[]            @relation("SocioEntityInvoices")
  paidExpenses              Expense[]                  @relation("SocioPaidExpense")
  expenseDistributions      ExpenseDistribution[]      @relation("SocioExpenseDistributions")
  receivedIncomes           Income[]                   @relation("SocioReceivedIncome")
  incomeDistributions       IncomeDistribution[]       @relation("SocioIncomeDistributions")
  socioEvents               SocioEvent[]
  stockExpenseDistributions StockExpenseDistribution[] @relation("SocioStockExpenseDistributions")
  vendorInvoices            VendorInvoice[]            @relation("SocioVendorInvoices")
  warehouses                Warehouse[]                @relation("SocioWarehouses")

  @@index([name])
  @@index([email])
  @@index([taxId])
}

model BusinessPartner {
  id                        String                     @id @default(cuid())
  name                      String
  type                      String
  email                     String?                    @unique
  phone                     String?
  address                   String?
  notes                     String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  entityInvoices            EntityInvoice[]            @relation("BusinessPartnerEntityInvoices")
  expenseDistributions      ExpenseDistribution[]      @relation("BusinessPartnerExpenseDistributions")
  incomeDistributions       IncomeDistribution[]       @relation("BusinessPartnerIncomeDistributions")
  stockExpenseDistributions StockExpenseDistribution[] @relation("BusinessPartnerStockExpenseDistributions")
  transactions              Transaction[]
  vendorInvoices            VendorInvoice[]            @relation("BusinessPartnerVendorInvoices")
  warehouses                Warehouse[]                @relation("BusinessPartnerWarehouses")

  @@index([name])
  @@index([email])
  @@index([type])
  @@map("business_partners")
}

model VenueEvent {
  id                        String                     @id @default(cuid())
  venueId                   String
  eventId                   String
  role                      VenueRole
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  expenseDistributions      ExpenseDistribution[]      @relation("VenueEventExpenseDistributions")
  incomeDistributions       IncomeDistribution[]       @relation("VenueEventIncomeDistributions")
  stockExpenseDistributions StockExpenseDistribution[] @relation("VenueEventStockExpenseDistributions")
  event                     Event                      @relation(fields: [eventId], references: [id])
  venue                     Venue                      @relation(fields: [venueId], references: [id])

  @@unique([venueId, eventId])
  @@map("venue_events")
}

model CompanyEvent {
  id                        String                     @id @default(cuid())
  companyId                 String
  eventId                   String
  incomeAmount              Float?                     @default(0)
  expenseAmount             Float?                     @default(0)
  currency                  Currency                   @default(USD)
  notes                     String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  company                   Company                    @relation(fields: [companyId], references: [id])
  event                     Event                      @relation(fields: [eventId], references: [id])
  expenseDistributions      ExpenseDistribution[]      @relation("CompanyEventExpenseDistributions")
  incomeDistributions       IncomeDistribution[]       @relation("CompanyEventIncomeDistributions")
  stockExpenseDistributions StockExpenseDistribution[] @relation("CompanyEventStockExpenseDistributions")

  @@unique([companyId, eventId])
  @@index([companyId])
  @@index([eventId])
}

model SocioEvent {
  id                        String                     @id @default(cuid())
  socioId                   String
  eventId                   String
  incomeAmount              Float?                     @default(0)
  expenseAmount             Float?                     @default(0)
  currency                  Currency                   @default(USD)
  paymentStatus             String                     @default("PENDING")
  paymentDate               DateTime?
  notes                     String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  expenseDistributions      ExpenseDistribution[]      @relation("SocioEventExpenseDistributions")
  incomeDistributions       IncomeDistribution[]       @relation("SocioEventIncomeDistributions")
  event                     Event                      @relation(fields: [eventId], references: [id])
  socio                     Socio                      @relation(fields: [socioId], references: [id])
  stockExpenseDistributions StockExpenseDistribution[] @relation("SocioEventStockExpenseDistributions")

  @@unique([socioId, eventId])
  @@index([socioId])
  @@index([eventId])
}

model VendorInvoice {
  id        String          @id @default(cuid())
  vendorId  String
  invoiceId String
  companyId String?
  venueId   String?
  socioId   String?
  company   Company?        @relation("CompanyVendorInvoices", fields: [companyId], references: [id])
  invoice   Invoice         @relation(fields: [invoiceId], references: [id])
  socio     Socio?          @relation("SocioVendorInvoices", fields: [socioId], references: [id])
  vendor    BusinessPartner @relation("BusinessPartnerVendorInvoices", fields: [vendorId], references: [id])
  venue     Venue?          @relation("VenueVendorInvoices", fields: [venueId], references: [id])
}

model EntityInvoice {
  id        String          @id @default(cuid())
  entityId  String
  invoiceId String
  companyId String?
  venueId   String?
  socioId   String?
  company   Company?        @relation("CompanyEntityInvoices", fields: [companyId], references: [id])
  entity    BusinessPartner @relation("BusinessPartnerEntityInvoices", fields: [entityId], references: [id])
  invoice   Invoice         @relation(fields: [invoiceId], references: [id])
  socio     Socio?          @relation("SocioEntityInvoices", fields: [socioId], references: [id])
  venue     Venue?          @relation("VenueEntityInvoices", fields: [venueId], references: [id])
}

model ExpenseDistribution {
  id                String           @id @default(cuid())
  amount            Float
  expenseId         String
  paymentRole       PaymentRole?
  settledAmount     Float            @default(0)
  pendingAmount     Float            @default(0)
  companyId         String?
  venueId           String?
  socioId           String?
  businessPartnerId String?
  venueEventId      String?
  companyEventId    String?
  socioEventId      String?
  debtSettlements   DebtSettlement[] @relation("ExpenseDebtSettlements")
  businessPartner   BusinessPartner? @relation("BusinessPartnerExpenseDistributions", fields: [businessPartnerId], references: [id])
  companyEvent      CompanyEvent?    @relation("CompanyEventExpenseDistributions", fields: [companyEventId], references: [id])
  company           Company?         @relation("CompanyExpenseDistributions", fields: [companyId], references: [id])
  expense           Expense          @relation(fields: [expenseId], references: [id])
  socioEvent        SocioEvent?      @relation("SocioEventExpenseDistributions", fields: [socioEventId], references: [id])
  socio             Socio?           @relation("SocioExpenseDistributions", fields: [socioId], references: [id])
  venueEvent        VenueEvent?      @relation("VenueEventExpenseDistributions", fields: [venueEventId], references: [id])
  venue             Venue?           @relation("VenueExpenseDistributions", fields: [venueId], references: [id])
}

model IncomeDistribution {
  id                String           @id @default(cuid())
  amount            Float
  incomeId          String
  paymentRole       PaymentRole?
  settledAmount     Float            @default(0)
  pendingAmount     Float            @default(0)
  companyId         String?
  venueId           String?
  socioId           String?
  businessPartnerId String?
  venueEventId      String?
  companyEventId    String?
  socioEventId      String?
  debtSettlements   DebtSettlement[] @relation("IncomeDebtSettlements")
  businessPartner   BusinessPartner? @relation("BusinessPartnerIncomeDistributions", fields: [businessPartnerId], references: [id])
  companyEvent      CompanyEvent?    @relation("CompanyEventIncomeDistributions", fields: [companyEventId], references: [id])
  company           Company?         @relation("CompanyIncomeDistributions", fields: [companyId], references: [id])
  income            Income           @relation(fields: [incomeId], references: [id])
  socioEvent        SocioEvent?      @relation("SocioEventIncomeDistributions", fields: [socioEventId], references: [id])
  socio             Socio?           @relation("SocioIncomeDistributions", fields: [socioId], references: [id])
  venueEvent        VenueEvent?      @relation("VenueEventIncomeDistributions", fields: [venueEventId], references: [id])
  venue             Venue?           @relation("VenueIncomeDistributions", fields: [venueId], references: [id])
}

model Warehouse {
  id                String           @id @default(cuid())
  name              String
  location          String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  companyId         String?
  venueId           String?
  socioId           String?
  businessPartnerId String?
  stocks            Stock[]
  businessPartner   BusinessPartner? @relation("BusinessPartnerWarehouses", fields: [businessPartnerId], references: [id])
  company           Company?         @relation("CompanyWarehouses", fields: [companyId], references: [id])
  socio             Socio?           @relation("SocioWarehouses", fields: [socioId], references: [id])
  venue             Venue?           @relation("VenueWarehouses", fields: [venueId], references: [id])
}

model Event {
  id                String              @id @default(cuid())
  name              String
  description       String?
  startDate         DateTime
  endDate           DateTime
  status            EventStatus         @default(DRAFT)
  type              EventType
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  companyEvents     CompanyEvent[]
  socioEvents       SocioEvent[]
  venueEvents       VenueEvent[]
  movements         EventMovement[]
  companies         Company[]           @relation("EventCompanies")
  venues            Venue[]
  incomes           Income[]
  expenses          Expense[]
  eventStocks       EventStock[]
  worksheets        Worksheet[]
  transactions      Transaction[]

  @@index([name])
  @@index([startDate])
  @@index([endDate])
  @@index([status])
  @@index([type])
  @@map("events")
}

model Category {
  id            String            @id @default(cuid())
  name          String
  description   String?
  type          TransactionType
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  expenses      Expense[]
  incomes       Income[]
  invoices      InvoiceCategory[]
  subcategories Subcategory[]

  @@unique([name, type])
  @@index([type])
}

model Subcategory {
  id          String               @id @default(cuid())
  name        String
  description String?
  categoryId  String
  type        TransactionType
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  expenses    Expense[]
  incomes     Income[]
  invoices    InvoiceSubcategory[]
  category    Category             @relation(fields: [categoryId], references: [id])

  @@unique([name, categoryId])
  @@index([type])
  @@index([categoryId])
}

model Invoice {
  id             String               @id @default(cuid())
  number         String               @unique
  date           DateTime
  status         String               @default("PENDING")
  total          Float
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  entityInvoices EntityInvoice[]
  categories     InvoiceCategory[]
  subcategories  InvoiceSubcategory[]
  vendorInvoices VendorInvoice[]
}

model InvoiceCategory {
  id         String   @id @default(cuid())
  invoiceId  String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])
}

model InvoiceSubcategory {
  id            String      @id @default(cuid())
  invoiceId     String
  subcategoryId String
  invoice       Invoice     @relation(fields: [invoiceId], references: [id])
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
}

model Income {
  id                String               @id @default(cuid())
  quantity          Float
  unitPrice         Float
  amount            Float
  currency          Currency             @default(USD)
  date              DateTime
  description       String?
  companyReceiverId String?
  venueReceiverId   String?
  socioReceiverId   String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  categoryId        String?
  subcategoryId     String?
  eventId           String?
  category          Category?            @relation(fields: [categoryId], references: [id])
  receivedByCompany Company?             @relation("CompanyReceivedIncome", fields: [companyReceiverId], references: [id])
  event             Event?               @relation(fields: [eventId], references: [id])
  receivedBySocio   Socio?               @relation("SocioReceivedIncome", fields: [socioReceiverId], references: [id])
  subcategory       Subcategory?         @relation(fields: [subcategoryId], references: [id])
  receivedByVenue   Venue?               @relation("VenueReceivedIncome", fields: [venueReceiverId], references: [id])
  distributions     IncomeDistribution[]

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([eventId])
  @@index([companyReceiverId])
  @@index([venueReceiverId])
  @@index([socioReceiverId])
}

model Expense {
  id             String                @id @default(cuid())
  quantity       Float
  unitPrice      Float
  amount         Float
  currency       Currency              @default(USD)
  date           DateTime
  description    String?
  companyPayerId String?
  venuePayerId   String?
  socioPayerId   String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  categoryId     String?
  subcategoryId  String?
  eventId        String?
  eventStocks    EventStock?
  category       Category?             @relation(fields: [categoryId], references: [id])
  paidByCompany  Company?              @relation("CompanyPaidExpense", fields: [companyPayerId], references: [id])
  event          Event?                @relation(fields: [eventId], references: [id])
  paidBySocio    Socio?                @relation("SocioPaidExpense", fields: [socioPayerId], references: [id])
  subcategory    Subcategory?          @relation(fields: [subcategoryId], references: [id])
  paidByVenue    Venue?                @relation("VenuePaidExpense", fields: [venuePayerId], references: [id])
  distributions  ExpenseDistribution[]
  consumptions   WorksheetConsumption?

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([eventId])
  @@index([companyPayerId])
  @@index([venuePayerId])
  @@index([socioPayerId])
}

model InventoryItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  unit        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  stocks      Stock[]
}

model Stock {
  id             String          @id @default(cuid())
  quantity       Float
  unitCost       Float
  totalCost      Float
  averageCost    Float
  currency       Currency        @default(USD)
  itemId         String
  warehouseId    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  eventStocks    EventStock[]
  item           InventoryItem   @relation(fields: [itemId], references: [id])
  warehouse      Warehouse       @relation(fields: [warehouseId], references: [id])
  stockMovements StockMovement[]
}

model StockMovement {
  id                  String                @id @default(cuid())
  type                String
  quantity            Float
  unitCost            Float
  totalCost           Float
  currency            Currency              @default(USD)
  previousAverageCost Float
  newAverageCost      Float
  stockId             String
  eventStockId        String?
  consumptionId       String?               @unique
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  consumption         WorksheetConsumption? @relation("StockMovementConsumption", fields: [consumptionId], references: [id])
  eventStock          EventStock?           @relation(fields: [eventStockId], references: [id])
  stock               Stock                 @relation(fields: [stockId], references: [id])
}

model EventStock {
  id             String                 @id @default(cuid())
  quantity       Float
  unitCost       Float
  totalCost      Float
  currency       Currency               @default(USD)
  eventId        String
  stockId        String
  expenseId      String?                @unique
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  event          Event                  @relation(fields: [eventId], references: [id])
  expense        Expense?               @relation(fields: [expenseId], references: [id])
  stock          Stock                  @relation(fields: [stockId], references: [id])
  stockMovements StockMovement[]
  consumptions   WorksheetConsumption[]
}

model Worksheet {
  id           String                 @id @default(cuid())
  date         DateTime
  eventId      String
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  event        Event                  @relation(fields: [eventId], references: [id])
  consumptions WorksheetConsumption[]
}

model WorksheetConsumption {
  id            String                     @id @default(cuid())
  quantity      Float
  unitCost      Float
  totalCost     Float
  currency      Currency                   @default(USD)
  worksheetId   String
  eventStockId  String
  expenseId     String?                    @unique
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt
  distributions StockExpenseDistribution[]
  stockMovement StockMovement?             @relation("StockMovementConsumption")
  eventStock    EventStock                 @relation(fields: [eventStockId], references: [id])
  expense       Expense?                   @relation(fields: [expenseId], references: [id])
  worksheet     Worksheet                  @relation(fields: [worksheetId], references: [id])
}

model StockExpenseDistribution {
  id                String               @id @default(cuid())
  amount            Float
  consumptionId     String
  companyId         String?
  venueId           String?
  socioId           String?
  businessPartnerId String?
  venueEventId      String?
  companyEventId    String?
  socioEventId      String?
  businessPartner   BusinessPartner?     @relation("BusinessPartnerStockExpenseDistributions", fields: [businessPartnerId], references: [id])
  companyEvent      CompanyEvent?        @relation("CompanyEventStockExpenseDistributions", fields: [companyEventId], references: [id])
  company           Company?             @relation("CompanyStockExpenseDistributions", fields: [companyId], references: [id])
  consumption       WorksheetConsumption @relation(fields: [consumptionId], references: [id])
  socioEvent        SocioEvent?          @relation("SocioEventStockExpenseDistributions", fields: [socioEventId], references: [id])
  socio             Socio?               @relation("SocioStockExpenseDistributions", fields: [socioId], references: [id])
  venueEvent        VenueEvent?          @relation("VenueEventStockExpenseDistributions", fields: [venueEventId], references: [id])
  venue             Venue?               @relation("VenueStockExpenseDistributions", fields: [venueId], references: [id])
}

model DebtSettlement {
  id                    String               @id @default(cuid())
  amount                Float
  currency              Currency             @default(USD)
  date                  DateTime
  notes                 String?
  expenseDistributionId String?
  incomeDistributionId  String?
  debtorType            String
  debtorId              String
  creditorType          String
  creditorId            String
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  expenseDistribution   ExpenseDistribution? @relation("ExpenseDebtSettlements", fields: [expenseDistributionId], references: [id])
  incomeDistribution    IncomeDistribution?  @relation("IncomeDebtSettlements", fields: [incomeDistributionId], references: [id])

  @@index([debtorType, debtorId])
  @@index([creditorType, creditorId])
}

model Transaction {
  id                String                    @id @default(cuid())
  date              DateTime
  type              TransactionType
  category          TransactionCategory
  subcategory       String
  detail            String
  quantity          Float
  unitAmount        Float
  totalAmount       Float
  currency          Currency
  eventId           String
  actorId           String
  actorType         String
  businessPartnerId String?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  businessPartner   BusinessPartner?          @relation(fields: [businessPartnerId], references: [id])
  event             Event                     @relation(fields: [eventId], references: [id])
  distributions     TransactionDistribution[]

  @@index([eventId])
  @@index([actorId])
  @@index([businessPartnerId])
}

model TransactionDistribution {
  id            String      @id @default(cuid())
  transactionId String
  actorId       String
  actorType     String
  percentage    Float?
  amount        Float?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  @@index([transactionId])
  @@index([actorId])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

enum EventStatus {
  DRAFT
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Currency {
  AED
  ARS
  AUD
  BRL
  CLP
  COP
  CRC
  EUR
  GBP
  MXN
  NZD
  PEN
  USD
  UYU
  PYG
  CNY
  JPY
}

enum EventType {
  CONCERT
  RESIDENCIA
  CACHET
  PRIVATE_EVENT
  FESTIVAL
  AFTER_PARTY
  COMERCIAL
  PR_EVENT
}

enum ConsumptionMethod {
  FIFO
  LIFO
  AVERAGE_COST
}

enum TaxPercentage {
  ZERO
  SIX_POINT_THREE
  SEVEN
  EIGHT_POINT_EIGHTY_SEVEN
  TEN_POINT_FIVE
  FIFTEEN
  TWENTY_ONE
}

enum VenueRole {
  PAYING
  RECEIVING
  NEUTRAL
}

enum TransactionType {
  INCOME_EVENT
  INCOME_SPONSORSHIP
  INCOME_MERCHANDISING
  INCOME_PR_EVENT
  EVENT_COS
  SPONSORSHIP_COS
  PR_EVENT_COS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  PARTIALLY_PAID
}

enum PaymentRole {
  PAYER
  RECEIVER
}

enum TransactionCategory {
  TICKET_SALES
  BAR_SALES
  SPONSORSHIP
  RENTAL
  PRODUCTION
  TALENT
  STAFF
  MARKETING
  LOGISTICS
  INSURANCE
  LICENSES
  EQUIPMENT
  OTHER
}

model EventMovement {
  id          String   @id @default(cuid())
  eventId     String
  type        String   // 'INCOME' or 'EXPENSE'
  amount      Float
  description String
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  event       Event    @relation(fields: [eventId], references: [id])

  @@index([eventId])
  @@map("event_movements")
}
